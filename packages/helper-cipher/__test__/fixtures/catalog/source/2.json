{
  "type": "root",
  "children": [
    {
      "type": "html",
      "value": "<header>\n  <div align=\"center\">\n    <a href=\"#license\">\n      <img\n        alt=\"License\"\n        src=\"https://img.shields.io/github/license/guanghechen/node-scaffolds\"\n      />\n    </a>\n    <a href=\"https://github.com/guanghechen/node-scaffolds/tags\">\n      <img\n        alt=\"Package Version\"\n        src=\"https://img.shields.io/github/v/tag/guanghechen/node-scaffolds?include_prereleases&sort=semver\"\n      />\n    </a>\n    <a href=\"https://github.com/guanghechen/node-scaffolds/search?l=typescript\">\n      <img\n        alt=\"Github Top Language\"\n        src=\"https://img.shields.io/github/languages/top/guanghechen/node-scaffolds\"\n      />\n    </a>\n    <a href=\"https://github.com/nodejs/node\">\n      <img\n        alt=\"Node.js Version\"\n        src=\"https://img.shields.io/node/v/@guanghechen/rollup-config-tsx\"\n      />\n    </a>\n    <a href=\"https://github.com/guanghechen/node-scaffolds/actions/workflows/ci.yml\">\n      <img\n        alt=\"CI Workflow\"\n        src=\"https://github.com/guanghechen/node-scaffolds/workflows/Build/badge.svg?branch=main\"\n      />\n    </a>\n    <a href=\"https://github.com/facebook/jest\">\n      <img\n        alt=\"Tested with Jest\"\n        src=\"https://img.shields.io/badge/tested_with-jest-9c465e.svg\"\n      />\n    </a>\n    <a href=\"https://github.com/prettier/prettier\">\n      <img\n        alt=\"Code Style: prettier\"\n        src=\"https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square\"\n      />\n    </a>\n  </div>\n</header>\n"
    },
    {
      "type": "code",
      "lang": "typescript",
      "meta": "",
      "value": "/**\n * Consume multiple streams serially.\n *\n * @param streams\n * @param writer\n */\nexport async function consumeStreams(\n  streams: fs.ReadStream[],\n  writer: fs.WriteStream,\n): Promise<void> {\n  for (const stream of streams) {\n    await new Promise<void>((resolve, reject) => {\n      stream\n        .on('error', reject)\n        .on('finish', resolve)\n        .on('close', resolve)\n        .pipe(writer, { end: false })\n    })\n  }\n}\n"
    },
    {
      "type": "code",
      "lang": "typescript",
      "meta": "",
      "value": "/**\n * Merge multiple read streams into Buffer serially.\n *\n * !!!The content returned by the reading stream should be Buffer instead of\n * string.\n *\n * @param stream\n * @param safeMode If true, the temporary chunks middle will be destroyed\n * @returns\n */\nexport async function streams2buffer(\n  streams: fs.ReadStream[],\n  safeMode = true,\n): Promise<Buffer> {\n  const chunks: Buffer[] = []\n  for (const stream of streams) {\n    await new Promise<void>((resolve, reject) => {\n      stream\n        .on('data', (chunk: Buffer) => chunks.push(chunk))\n        .on('error', reject)\n        .on('end', resolve)\n    })\n  }\n\n  const result = Buffer.concat(chunks)\n  if (safeMode) destroyBuffers(chunks)\n  return result\n}\n"
    },
    {
      "type": "heading",
      "depth": 1,
      "children": [
        {
          "type": "text",
          "value": "Setext headings"
        }
      ]
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "text",
          "value": "Task List Items (extension):"
        }
      ]
    },
    {
      "type": "list",
      "ordered": false,
      "marker": 45,
      "spread": false,
      "children": [
        {
          "type": "listItem",
          "status": "done",
          "children": [
            {
              "type": "text",
              "value": "foo"
            },
            {
              "type": "list",
              "ordered": false,
              "marker": 45,
              "spread": false,
              "children": [
                {
                  "type": "listItem",
                  "status": "doing",
                  "children": [
                    {
                      "type": "text",
                      "value": "bar"
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "status": "done",
                  "children": [
                    {
                      "type": "text",
                      "value": "baz"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "status": "todo",
          "children": [
            {
              "type": "text",
              "value": "bim"
            }
          ]
        }
      ]
    },
    {
      "type": "blockquote",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This is a blockquote"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "with multiple lines."
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "lang": "typescript",
      "meta": "",
      "value": "const a = 'a'\nconst b = 'b'\nconsole.log('a + b:', a + b)\nconsole.log('This is a typescript code snippets')\n"
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "text",
          "value": "This is a math block:"
        }
      ]
    },
    {
      "type": "math",
      "value": "\\lvert f(x)-A \\rvert = \\left\\lvert \\frac{x^2-1}{x-1}-2 \\right\\rvert = \\lvert x+1-2 \\rvert = \\lvert x-1 \\rvert  < \\epsilon"
    },
    {
      "type": "admonition",
      "keyword": "tip",
      "title": [],
      "children": [
        {
          "type": "blockquote",
          "children": [
            {
              "type": "heading",
              "depth": 3,
              "children": [
                {
                  "type": "text",
                  "value": "将进酒"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "君不见黄河之水天上来，奔流到海不复回。\n君不见高堂明镜悲白发，朝如青丝暮成雪。\n人生得意须尽欢，莫使金樽空对月。\n天生我材必有用，千金散尽还复来。\n烹羊宰牛且为乐，会须一饮三百杯。\n岑夫子，丹丘生，将进酒，杯莫停。\n与君歌一曲，请君为我倾耳听。\n钟鼓馔玉不足贵，但愿长醉不复醒。\n古来圣贤皆寂寞，惟有饮者留其名。\n陈王昔时宴平乐，斗酒十千恣欢谑。\n主人何为言少钱，径须沽取对君酌。\n五花马、千金裘，呼儿将出换美酒，与尔同销万古愁"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "thematicBreak"
    },
    {
      "type": "heading",
      "depth": 1,
      "children": [
        {
          "type": "text",
          "value": "heading1"
        }
      ]
    },
    {
      "type": "heading",
      "depth": 2,
      "children": [
        {
          "type": "text",
          "value": "heading2"
        }
      ]
    },
    {
      "type": "heading",
      "depth": 3,
      "children": [
        {
          "type": "text",
          "value": "heading3"
        }
      ]
    },
    {
      "type": "heading",
      "depth": 4,
      "children": [
        {
          "type": "text",
          "value": "heading4"
        }
      ]
    },
    {
      "type": "heading",
      "depth": 5,
      "children": [
        {
          "type": "text",
          "value": "heading5"
        }
      ]
    },
    {
      "type": "heading",
      "depth": 6,
      "children": [
        {
          "type": "text",
          "value": "heading6"
        }
      ]
    },
    {
      "type": "thematicBreak"
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "text",
          "value": "This is a footnote "
        },
        {
          "type": "footnote",
          "children": [
            {
              "type": "text",
              "value": "something...."
            }
          ]
        },
        {
          "type": "text",
          "value": "."
        }
      ]
    },
    {
      "type": "footnoteDefinition",
      "identifier": "foo-2",
      "label": "foo-2",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This is a footnote definition."
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "text",
          "value": "This is a footnote reference "
        },
        {
          "type": "footnoteReference",
          "identifier": "foo-2",
          "label": "foo-2"
        }
      ]
    },
    {
      "type": "thematicBreak"
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "text",
          "value": "Definitions:"
        }
      ]
    },
    {
      "type": "definition",
      "identifier": "foo",
      "label": "foo",
      "url": "/url",
      "title": "title"
    },
    {
      "type": "definition",
      "identifier": "bar",
      "label": "bar",
      "url": "/bar",
      "title": "title2"
    },
    {
      "type": "definition",
      "identifier": "baz",
      "label": "baz",
      "url": "/waw"
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "linkReference",
          "identifier": "bar",
          "label": "bar",
          "referenceType": "full",
          "children": [
            {
              "type": "text",
              "value": "foo"
            }
          ]
        },
        {
          "type": "linkReference",
          "identifier": "baz",
          "label": "baz",
          "referenceType": "shortcut",
          "children": [
            {
              "type": "text",
              "value": "baz"
            }
          ]
        },
        {
          "type": "text",
          "value": "\n"
        },
        {
          "type": "linkReference",
          "identifier": "foo",
          "label": "foo",
          "referenceType": "shortcut",
          "children": [
            {
              "type": "text",
              "value": "foo"
            }
          ]
        },
        {
          "type": "text",
          "value": " "
        },
        {
          "type": "linkReference",
          "identifier": "baz",
          "label": "baz",
          "referenceType": "full",
          "children": [
            {
              "type": "text",
              "value": "bar"
            }
          ]
        },
        {
          "type": "text",
          "value": "\n"
        },
        {
          "type": "linkReference",
          "identifier": "foo",
          "label": "foo",
          "referenceType": "collapsed",
          "children": [
            {
              "type": "text",
              "value": "foo"
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "imageReference",
          "identifier": "foo",
          "label": "foo",
          "referenceType": "collapsed",
          "alt": "foo"
        }
      ]
    },
    {
      "type": "paragraph",
      "children": [
        {
          "type": "link",
          "url": "/url",
          "children": [
            {
              "type": "text",
              "value": "foo"
            }
          ]
        },
        {
          "type": "text",
          "value": "\n"
        },
        {
          "type": "image",
          "url": "/url.jpg",
          "alt": "foo"
        }
      ]
    }
  ]
}
